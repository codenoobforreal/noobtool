name: Release

on:
  push:
    branches: [ "master" ]
    # tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always
  CI: true
  PROJECT_NAME: noobtool

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install rustup
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "release-cache"

      - name: Run cargo test for all apps
        run: cargo test --workspace --locked

  build:
    name: Build and Package - ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.runner }}
    needs: test
    strategy:
      matrix:
        # https://doc.rust-lang.org/nightly/rustc/platform-support.html#tier-1-with-host-tools
        platform:
          - name: linux-arm64
            runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin_suffix: ""
            archive_type: tar.gz

          - name: linux-x86_64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_suffix: ""
            archive_type: tar.gz

          - name: linux-i686_32
            runner: ubuntu-latest
            target: i686-unknown-linux-gnu
            bin_suffix: ""
            archive_type: tar.gz

          - name: windows-i686_32
            runner: windows-latest
            target: i686-pc-windows-msvc
            bin_suffix: .exe
            archive_type: zip

          - name: windows-x86_64-MinGW
            runner: windows-latest
            target: x86_64-pc-windows-gnu
            bin_suffix: .exe
            archive_type: zip

          - name: windows-x86_64-MSVC
            runner: windows-latest
            target: x86_64-pc-windows-msvc
            bin_suffix: .exe
            archive_type: zip

          - name: macos-arm64
            runner: macos-latest
            target: aarch64-apple-darwin
            bin_suffix: ""
            archive_type: tar.gz

          # tier 2 support
          - name: macos-x86_64
            runner: macos-latest
            target: x86_64-apple-darwin
            bin_suffix: ""
            archive_type: tar.gz


    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install compression tools
        run: |
          if [ "${{ matrix.platform.runner }}" = "ubuntu-latest" ]; then
            sudo apt-get update && sudo apt-get install -y zip tar
          elif [ "${{ matrix.platform.runner }}" = "windows-latest" ]; then
            choco install 7zip -y
          fi
        shell: bash

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "release-cache"

      - name: Build binary
        run: cargo build --locked --release --target ${{ matrix.platform.target }}

      - name: Move and rename binaries
        shell: bash
        run: |
          BINARIES=("hevc_batch_encode" "video_thumbnail")
          for bin_name in "${BINARIES}"; do
            BIN_OUTPUT="target/${{ matrix.platform.target }}/release/${bin_name}${{ matrix.platform.bin_suffix }}"
            BIN_RELEASE="${bin_name}-${{ matrix.platform.name }}${{ matrix.platform.bin_suffix }}"
            if [ -f "${BIN_OUTPUT}" ]; then
              mv "${BIN_OUTPUT}" "./${BIN_RELEASE}"
              echo "finished: ${BIN_RELEASE}"
            else
              echo "warnning: can't find binary ${BIN_OUTPUT}"
              exit 1
            fi
          done

      - name: Create archives
        shell: bash
        run: |
          BINARIES=("hevc_batch_encode" "video_thumbnail")
          ARCHIVE_FILES=()
          for bin_name in "${BINARIES}"; do
            BIN_FILE="${bin_name}-${{ matrix.platform.name }}${{ matrix.platform.bin_suffix }}"
            ARCHIVE_NAME="${bin_name}-${{ matrix.platform.name }}.${{ matrix.platform.archive_type }}"

            if [ -f "./${BIN_FILE}" ]; then
              if [ "${{ matrix.platform.archive_type }}" = "zip" ]; then
                7z a "${ARCHIVE_NAME}" "./${BIN_FILE}"
              else
                tar -czf "${ARCHIVE_NAME}" "./${BIN_FILE}"
              fi
              ARCHIVE_FILES+=("${ARCHIVE_NAME}")
              echo "created archive: ${ARCHIVE_NAME}"
            else
              echo "error: no file found ./${BIN_FILE}"
              exit 1
            fi
          done


          # echo "ASSETS=$(echo ${ARCHIVE_FILES} | jq -R -s -c 'split(" ")' )" >> $GITHUB_ENV

        # env:
        #   ARCHIVE_FILES: ""

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.platform.name }}-${{ github.run_number }}
          path: |
            hevc_batch_encode-${{ matrix.platform.name }}.${{ matrix.platform.archive_type }}
            video_thumbnail-${{ matrix.platform.name }}.${{ matrix.platform.archive_type }}
          compression-level: 9

      - name: Release binaries (on tag push)
        # if: github.ref_type == 'tag'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            hevc_batch_encode-${{ matrix.platform.name }}.${{ matrix.platform.archive_type }}
            video_thumbnail-${{ matrix.platform.name }}.${{ matrix.platform.archive_type }}
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
