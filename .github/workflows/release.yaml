name: Release

on:
  push:
    branches: [ "master" ]
    # tags: "[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always
  CI: true
  PROJECT_NAME: noobtool

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install rustup
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run cargo test for all apps
        run: cargo test --workspace --locked

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    name: Build and Package - ${{ matrix.build }}
    strategy:
      # copy matrix setup from https://github.com/open-contracting/cardinal-rs/blob/main/.github/workflows/release.yml
      matrix:
        # Include all "Tier 1 with Host Tools" targets and "Tier 2 with Host Tools" targets for Windows and macOS,
        # excluding *-pc-windows-msvc, which requires cross-toolchains. Goal is one option per OS per architecture.
        # https://doc.rust-lang.org/rustc/platform-support.html
        # https://github.com/cross-rs/cross#supported-targets
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
        include:
          # 32-bit (i686)
          # i686-apple-darwin is Tier 3.
          - build: linux-32-bit
            os: ubuntu-latest
            target: i686-unknown-linux-gnu
            command: cross

          - build: windows-32-bit
            os: ubuntu-latest
            target: i686-pc-windows-gnu
            command: cross

          # 64-bit (x86)
          - build: linux-64-bit
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            command: cross

          - build: macos-64-bit
            os: macos-latest
            target: x86_64-apple-darwin
            command: cargo

          - build: windows-64-bit
            os: ubuntu-latest
            target: x86_64-pc-windows-gnu
            command: cross

          # 64-bit (ARM)
          - build: windows-arm
            os: ubuntu-latest
            target: aarch64-pc-windows-gnullvm
            command: cross

          - build: macos-arm
            os: macos-latest
            target: aarch64-apple-darwin
            command: cargo

          - build: linux-arm
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            command: cross

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      # exclude utils
      - name: Install cross and Build binary
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - run: |
          cargo install cross --git https://github.com/cross-rs/cross
          ${{ matrix.command }} build --release --workspace --exclude utils --target ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      # - name: Create archive
      #   id: archive
      #   shell: bash
      #   run: |
      #     DIRECTORY="ocdscardinal-${{ github.ref_name }}-${{ matrix.build }}"
      #     if [[ "${{ matrix.target }}" =~ "-pc-windows-" ]]; then
      #       SUFFIX=".exe"
      #     else
      #       SUFFIX=""
      #     fi
      #     mkdir "$DIRECTORY"
      #     cp docs/changelog.md LICENSE README.md "target/${{ matrix.target }}/release/ocdscardinal$SUFFIX" "$DIRECTORY"
      #     7z a "$DIRECTORY.zip" "$DIRECTORY"
      #     echo "path=$DIRECTORY.zip" >> $GITHUB_OUTPUT

      - name: Create archive
        id: archive
        shell: bash
        run: |
          BINARIES=("hevc_batch_encode" "video_thumbnail")
          for bin_name in "$BINARIES"; do
            DIRECTORY="$bin_name-${{ github.ref_name }}-${{ matrix.build }}"
            if [[ "${{ matrix.target }}" =~ "-pc-windows-" ]]; then
              SUFFIX=".exe"
            else
              SUFFIX=""
            fi
            BIN_OUTPUT="target/${{ matrix.target }}/release/$bin_name$SUFFIX
            BIN_RELEASE="$bin_name-${{ matrix.build }}$SUFFIX"
            mv "$BIN_OUTPUT" "./$BIN_RELEASE"
            cp "./$BIN_RELEASE" "$DIRECTORY"
            7z a "$DIRECTORY.zip" "$DIRECTORY"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.build }}-${{ github.run_number }}
          path: |
            hevc_batch_encode-${{ github.ref_name }}-${{ matrix.build }}.zip
            video_thumbnail-${{ github.ref_name }}-${{ matrix.build }}.zip
          compression-level: 0

      - name: Release binaries (on tag push)
        # if: github.ref_type == 'tag'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            hevc_batch_encode-${{ github.ref_name }}-${{ matrix.build }}.zip
            video_thumbnail-${{ github.ref_name }}-${{ matrix.build }}.zip
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
